DNS Round Robin的最大的优点就是易于实现和代价低廉：
　　 代价低，易于建立。 为了支持轮流排程，系统管理员只需要在DNS服务器上作一些改动，而且在许多比较新的版本的DNS服务器上已经增加了这种功能。对于Web应用来说，不需要对代码作任何的修改；事实上，Web应用本身并不会意识到负载均衡配置，即使在它面前。
　　 简单. 不需要网络专家来对之进行设定，或在出现问题时对之进行维护。
　　 DNS 轮流排程的缺点
　　 这种基于软件的负载均衡方法主要存在两处不足，一是不实时支持服务期间的关联，一是不具有高可靠性。
　　 不支持服务器间的一致性。服务器一致性是负载均衡系统所应具备的一种能力，通过它，系统可以根据会话信息是属于服务器端的，还是底层数据库级别的，继而将用户的请求导向相应的服务器。而DNS轮流排程则不具备这种智能化的特性。它是通过cookie、隐藏域、重写URL三种方法中的一种来进行相似的判断的。当用户通过上述基于文本标志的方法与服务器建立连接之后，其所有的后续访问均是连接到同一个服务器上。问题是，服务器的IP是被浏览器暂时存放在缓存中，一旦记录过期，则需要重新建立连接，那么同一个用户的请求很可能被不同的服务器进行处理，则先前的所有会话信息便会丢失。
　　 不支持高可靠性。设想一个具有N个节点的集群。如果其中的一个节点毁坏，那么所有的访问该节点的请求将不会有所回应，这是任何人都不愿意看到的。比较先进的路由器可以通过每隔一定的时间间隔，对节点检查，如果有毁坏的节点，则将之从列表中去除的方法，解决这个问题。但是，由于在Internet上，ISPs将众多的DNS存放在缓存中，以节省访问时间，因此，DNS的更新就会变得非常缓慢，以至于有的用户可能会访问一些已经不存在的站点，或者一些新的站点得不到访问。所以，尽管DNS轮流排程在一定程度上解决了负载均衡问题，但这种状况的改变并不是十分乐观和有效的。
　　 除了上面介绍的轮流排程方法外，还有三种DNS负载均衡处理分配方法，将这四种方法列出如下：
　　 Round robin (RRS)： 将工作平均的分配到服务器 (用于实际服务主机性能一致)
　　 Least-connections (LCS)： 向较少连接的服务器分配较多的工作(IPVS 表存储了所有的活动的连接。用于实际服务主机性能一致。)
　　 Weighted round robin (WRRS)： 向较大容量的服务器分配较多的工作。可以根据负载信息动态的向上或向下调整。 (用于实际服务主机性能不一致时)


NOSQL的优势

易扩展

NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。

大数据量，高性能

NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了。

灵活的数据模型

NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量的web2.0时代尤其明显。

高可用

NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。比如Cassandra，HBase模型，通过复制模型也能实现高可用。


One of the primary reasons that NoSQL will never wholly replace SQL is that it was never meant to do so.  NoSQL databases have a very narrow focus: they are designed primarily for storage, and offer very little functionality beyond. When transactions enter the equation, relational databases are still the better choice. Further, NoSQL doesn’t really do so well with data backup on its own.

Standardization and Open Source

That NoSQL is open-source could at once be considered its greatest strength and its greatest weakness. The truth is, there really aren’t many reliable standards for NoSQL databases quite yet, meaning that no two databases are likely to be created equal. Getting a particular implementation to play nice with existing infrastructure can thus be something of a crap-shoot, while support could end up being spotty when compared against a more traditional database implementation.

Performance and Scaling > Consistency

Because of the way data is stored and managed in a NoSQL database, data consistency might well end up being a concern. NoSQL puts performance and scalability first; consistency isn’t really a consideration. Depending on what you’re using it for, this could actually be either a crippling weakness or a powerful strength. In certain situations – such as when you’re dealing with a massive onslaught of unstructured data – this is completely acceptable. In other situations, such as management of financial records, it most certainly is not.

A General Lack of Maturity

While it’s certainly true that NoSQL isn’t exactly the new kid on the block (the underlying technology has existed for at least ten years now), widespread acceptance of NoSQL still lags; compared to traditional relational databases the technology is still relatively immature. This is reflected also in a lack of developers and administrators with the right knowledge and skills: NoSQL may be administrator and developer-friendly, true, but that means nothing if neither administrator nor developer have the tools or understanding to address it.
